进程调度
============================================


本节导读
--------------------------------------------

当处理器只有一个，而在内存中存在多个程序/任务/进程的时候，它们就会共享处理器资源。而操作系统就要负责让它们能够高效合理地共享处理器资源，这就引入了调度（scheduling）这个概念。进程调度就是操作系统进程管理的重要组成部分。事实上，在计算机出现之前，调度的概念和应用就出现在人类的生活、工作和生产环境中了，如汽车装配线调度、工厂作业车间调度等。调度的一个一般定义是：在一定的约束条件下，把有限的资源在时间上分配给若干个任务，以满足或优化一个或多个性能指标。对于计算机系统而言，就是在一台计算机中的内存中运行了多个进程，操作系统把有限的处理器在时间上分配给各个进程，以满足或优化进程执行的性能指标。所以本节的核心是：操作系统如何通过进程调度来提高进程的性能。

那操作系统需要了解和的的关键问题就是：计算机中运行进程的约束条件是啥？性能指标是啥？如何设计和评价调度策略？


回顾一下
---------------------------------------------

已实现操作系统中的调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

目前已经实现的操作系统都比较简单，只保留了体现操作系统核心思想的部分。不过实际上，从我们设计实现的面向批处理的“邓式鱼” 操作系统开始，我们就有了非常简单的调度雏形。“邓式鱼” 操作系统只是把程序按提交或排名的先后顺序，一个一个地加载到内存中执行，一个程序执行完毕后，再执行下一个程序，这就是一种调度，只是效率很低。在后续面向多道程序的“锯齿螈”操作系统进化到“始初龙”操作系统后，运行的程序称为任务，并且任务可以主动放弃处理器，让操作系统能够按任务排队顺序选择下一个就绪的任务去执行。从调度策略上看，这几种操作系统采用的都可看作是一种先来先服务的调度策略，实现起来非常简单。

而后续面向分时多任务系统的“腔骨龙”操作系统为了公平和执行效率起见，给每个任务分配了时间片，任务执行消耗完时间片后，操作系统就可以抢占正在执行的任务，把处理器分配给其他任务执行。这就是一种基于时间片的轮转调度策略。再之后实现的操作系统都采用了这种调度策略。

计算机发展历史中的调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

在早期以纸带、卡片或磁带作为程序/数据输入的批处理系统时代，操作系统的调度很简单，只需依次加载并运行每一个作业即可。操作系统不需要考虑多用户，分时复用等情况，能让程序正常运行就很不错了。而到了多道程序系统时代，内存中有了多个程序，而程序是属于不同用户的，处理器是大家都想占用的宝贵资源，用户不得不花时间等待，操作系统需要想方设法地减少用户的等待时间，这样调度算法就要复杂一些。而分时多任务系统出现后，目标不同的批处理任务和交互任务都需要得到服务，操作系统在调度上不得不花费更大心思来应对不同性能指标的任务要求。当然，这一阶段的计算机系统还是以昂贵的大型机/小型机为主，服务的用户主要来源于科学计算和商业处理等科研机构和公司，他们希望把计算机系统的性能榨干，这样才对得起他们付出的大量金钱。

当发展到了个人计算机时代，情况发生了变化，计算机的价格大幅下降，而且个人计算机的多数程序受到的是个人用户当前的键盘/鼠标/图形显示等I/O速率的限制，而不是CPU处理速率的限制。这样造成的结果是，操作系统的调度功能在相对简单的个人计算机上的作用并不显著。

随着网络的发展，以数据中心为代表的网络服务器计算机系统改变了我们的生活，多核处理器已经成为主流，各种日常应用（搜索、网络社交、网络游戏等）会消耗数据中心中大量的处理器资源和网络/存储资源，多个进程经常会竞争处理器，因此操作系统的调度功能再一次变得至关重要，且要应对更加复杂多样的应用需求和硬件环境。

当移动互联网成为基础设施，移动终端越来越普及时，大家几乎人手一台智能手机、智能平板或智能手表等，人们关注的除了流畅地执行各种应用外，还希望这些移动终端能够长时间使用。这使得除了增加电池容量外，操作系统的调度功能还需在应用不必运行时，让它们尽量休眠，关闭可暂时不用的外设，减少电量的消耗。可以看到，随着计算机系统的发展，应用需求的变化，都会对操作系统调度功能提出新的需求。

目前我们实现的操作系统调度策略还太简单，不一定适合更加实际的情况。接下来，我们将讲述针对计算机约束条件以及进程的性能指标，如何设计合理的调度策略？我们会分析在不同的计算机系统下，操作系统中典型的调度基本思路和调度策略。


批处理系统的调度
----------------------------------

在设计具体的调度策略之前，需要了解操作系统和应用的计算机系统和运行环境，对应用的特点和它期望的性能指标也要清楚。我们先看看批处理系统下的应用如何进行调度。

约束条件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

批处理系统中的进程有如下一些约束/前提条件：

1. 每个进程同时到达。
2. 每个进程的执行时间相同。
3. 进程一旦开始执就保持运行直到结束。
4. 进程的执行时间是已知的。
5. 进程在整个执行过程期间不执行I/O操作。

注意，我们这里设定的各种条件是可以调整的，即可以进一步简化或更加贴近实际情况，这样可以简化或加强对调度策略的设计。比如，我们可以把条件 2 改变一下：

2. 每个进程的执行时间不同。

性能指标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

我们还需给出性能指标，用于衡量，比较和评价不同的调度策略。对于批处理系统中的一般应用而言，可以只有一个性能指标：周转时间（turn around time），即进程完成时间与进程到达时间的差值：
    
    T周转时间= T完成时间−T到达时间

由于前提条件1 明确指出所有进程在同一时间到达，那么T到达时间= 0，因此T周转时间= T完成时间。

先来先服务
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

最短作业优先
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

交互式系统的调度
----------------------------------

约束条件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

性能指标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

最短完成时间优先（STCF）
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

轮转调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

优先级调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

通用计算机系统的调度
----------------------------------

约束条件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

性能指标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

多级反馈队列调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

比例份额调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

实时计算机系统的调度
----------------------------------

约束条件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

性能指标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

RM调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

EDF调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

多处理器计算机系统的调度
----------------------------------

约束条件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

性能指标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

单队列调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

多队列调度
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


小结
----------------------------------



