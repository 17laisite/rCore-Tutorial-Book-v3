超越物理内存的地址空间
==============================================================


本节导读
--------------------------

有限的物理内存
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


到目前为止，在面向批处理系统的操作系统中，正在运行的任务只有一个，可以访问计算机的整个物理内存空间。如果物理内存空间不够，任务需要比较小心翼翼的地申请和释放内存，来确保在当前时间段中内存够用。在面向多道程序的协作式操作系统或面向分时多任务的抢占式操作系统中，由于在内存中会有多个任务来共享整个物理内存，且任务之间的物理内存空间是隔离的，导致任务越多，每个任务可用的物理内存空间会越少。这样，在提高CPU利用率和任务间的隔离安全性的同时，一个比较严重的问题出现了： **物理内存不够用** 。

.. note::

	为什么要为应用程序支持巨大的地址空间？

	在计算机发展的早期，计算机系统上的应用程序一般不需要巨大的地址空间，更需要的是强劲的CPU处理能力。但从二十世纪七十年代末开始的个人计算机一路发展至今，存在着某种动力使得人们如此频繁地更新计算机设备，这就是：

	**安迪比尔定律：比尔要拿走安迪所给的（What Andy gives, Bill takes away）**

	Intel处理器的速度每十八个月翻一番，计算机内存和硬盘的容量以更快的速度在增长。过去的MS DOS操作系统和DOS应用程序在内存容量为640KB的计算机上顺畅地运行。而现在的Windows 11和Windows应用程序在内存容量8GB的计算机上仅勉强够用，而建议的内存配置是16GB（是640KB的25600倍）。虽然新的软件功能比以前的版本强了一些，但其增加的功能和它的大小不成比例。

	那大内存带来的好处是啥？ **方便！** 一般用户可以在计算机上同时开启多个应用：文字编辑、上网浏览、视频会议等，享受方便的数字生活。应用程序开发者不必担心要处理的数据是否有足够空间存储，只需编写程序，根据数据所需空间分配内存即可，甚至都不需要考虑释放内存的操作。

	注：安迪是Intel公司 CEO 安迪·格鲁夫（Andy Grove），比尔是微软公司创始人比尔·盖茨（Bill Gates）。


超越物理内存的方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

我们需要突破物理内存有限的限制，这需要通过应用程序的软件编程技巧或操作系统与硬件结合的内存管理机制来解决。首先，我们可以看看基于应用程序本身的方法，即分时复用内存：即应用程序/运行时库动态地申请和释放内存，让不同的数据在不同时间段内共享同一块内存空间。

另外一种方法是基于操作系统的方法，即把远大于且远慢于物理内存的存储设备（如硬盘、SSD等）利用起来作为内存的一部分。如果把正在运行的任务所没用到的物理内存空间，比如处于等待状态的任务所使用的物理内存空间，甚至是正在运行的任务会较晚访问的数据所占用的内存空间，移出并暂存在存储设备中，那么应用程序可以访问的内存空间（虚拟的）就包括了存储设备的巨大容量了。

当然还有其他一些针对特定使用场景下的不太常用的方法，比如内存压缩方法。对于需要处理大数据的应用而言，内存中存放的主要是各种数据，而很多数据（如具有大量重复的值）是可以被压缩的。所以采用一定的压缩数据的结构和数据压缩方法，可以有效地减少数据占用的内存空间。

这些给应用程序带来好处的方法，也会引入各种运行时的开销，如果处理不当，会让任务本身，甚至整个系统的执行效率大大下降。所以，我们希望通过设计有效的机制和策略，能在扩大虚拟的内存容量的同时，保证应用程序和系统能够高效地运行。


分时复用内存
--------------------------------

考虑到应用程序在其运行中的不同时间段内，会使用不同的数据，所以可以让这些数据在不同的时间段内共享同一内存空间。这就是分时复用内存的基本思路。当应用程序从操作系统中只能获得一块固定大小的有限内存空间（称为：空闲空间）后，应用程序一般会采用动态分配内存的方式来合理使用有限的物理内存。在本章的 :ref:`Rust 中的动态内存分配 <term-dynamic-allocation>` 一节中，讲述了动态内存分配的基本概念。如何动态地管理空闲内存以提高内存的使用效率，是一个需要进一步讨论的问题。我们将讲述两种方法：

- 动态内存分配：由应用程序主动发出申请或释放内存的动态请求，由运行时库或应用程序本身通过一定的策略来管理空闲空间。
- 覆盖技术：应用程序中，不会出现在一个调用栈上的函数之间所使用的不同变量，可以共享同一块内存空间。由运行时库或应用程序本身通过一定的策略来管理共享的内存空间。


动态分配内存
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

这里我们会进一步分析动态分配内存的策略。



覆盖技术
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





页面替换机制
--------------------------------

页表存在位
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

作为交换区的存储设备
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

内存访问异常处理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



页面替换策略
--------------------------------

局部性原理
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

评价指标
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

算法分类
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

局部页面置换算法

全局页面置换算法



最优置换策略
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FIFO置换策略
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

LRU置换策略
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clock置换策略
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

工作集置换策略
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

缺页率置换策略
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Belady现象
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


小结
--------------------------------