练习一
==============

.. toctree::
   :hidden:
   :maxdepth: 5

编程练习一：backtrace
---------------------------------------------

仔细阅读 :ref:`函数调用与栈 <function-call-and-stack>` 小节的内容，特别是函数栈帧中的 ra 寄存器和 prev fp 的位置以及它们的作用。

编程实现：在 ``rust_main`` 中多层嵌套调用函数，然后在最深层按照层数由深到浅打印函数调用链，也就是每一层函数栈帧中保存的 ra 寄存器的值，
由此我们可以依次知道每个函数的调用语句所在的地址，也就能跟踪一整条函数调用链。

拓展：寻找/改写 Rust 库或者自己实现，能够通过 ra 寄存器的值得到其所在的源文件/函数/行数，从而更直观的看到函数调用链。或者也可以通过 
addr2line 工具在运行结束之后手动去可执行文件中查找每个地址对应的信息。